args: Namespace(input_dir='/home/nmuller/projects/data/oads', output_dir='.', model_name='model_23-06-23-16:21:55',
  n_epochs='5', force_recrop=False, get_visuals=False, optimizer='adam', model_path=None,
  model_type='resnet50', image_representation='RGBEdges', n_processes='1', batch_size='1',
  image_size=400, random_state=42, use_jpeg=False, jpeg_quality=90, new_dataloader=False,
  dataloader_path='/home/niklas/projects/oads_access/dataloader', preload_all=False,
  no_normalization=False, test=False)
criterion: CrossEntropyLoss()
device: cuda
file_formats:
- .ARW
- .npy
image_representation: RGBEdges
input_dir: /home/nmuller/projects/data/oads
model: "DataParallel(\n  (module): ResNet(\n    (conv1): Conv2d(6, 64, kernel_size=(7,\
  \ 7), stride=(2, 2), padding=(3, 3), bias=False)\n    (bn1): BatchNorm2d(64, eps=1e-05,\
  \ momentum=0.1, affine=True, track_running_stats=True)\n    (relu): ReLU(inplace=True)\n\
  \    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n\
  \    (layer1): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(64,\
  \ 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64,\
  \ eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2):\
  \ Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n\
  \        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n\
  \        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n       \
  \   (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      \
  \    (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(256, 64, kernel_size=(1,\
  \ 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3,\
  \ 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64,\
  \ eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3):\
  \ Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3):\
  \ BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1):\
  \ Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1):\
  \ BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1,\
  \ 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True,\
  \ track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1),\
  \ stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n \
  \     )\n    )\n    (layer2): Sequential(\n      (0): Bottleneck(\n        (conv1):\
  \ Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1):\
  \ BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1,\
  \ 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True,\
  \ track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1),\
  \ stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n \
  \       (downsample): Sequential(\n          (0): Conv2d(256, 512, kernel_size=(1,\
  \ 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n\
  \        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n\
  \        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1,\
  \ 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True,\
  \ track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1),\
  \ stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n \
  \     )\n      (2): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1,\
  \ 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3,\
  \ 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128,\
  \ eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3):\
  \ Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3):\
  \ BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1):\
  \ Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1):\
  \ BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1,\
  \ 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True,\
  \ track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1),\
  \ stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n \
  \     )\n    )\n    (layer3): Sequential(\n      (0): Bottleneck(\n        (conv1):\
  \ Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1):\
  \ BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1,\
  \ 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True,\
  \ track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1,\
  \ 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n \
  \       (downsample): Sequential(\n          (0): Conv2d(512, 1024, kernel_size=(1,\
  \ 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n\
  \        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n\
  \        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1,\
  \ 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True,\
  \ track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1,\
  \ 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n \
  \     )\n      (2): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1,\
  \ 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3,\
  \ 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256,\
  \ eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3):\
  \ Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3):\
  \ BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1):\
  \ Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1):\
  \ BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1,\
  \ 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True,\
  \ track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1,\
  \ 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n \
  \     )\n      (4): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1,\
  \ 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3,\
  \ 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256,\
  \ eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3):\
  \ Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3):\
  \ BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (relu): ReLU(inplace=True)\n      )\n      (5): Bottleneck(\n        (conv1):\
  \ Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1):\
  \ BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1,\
  \ 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True,\
  \ track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1,\
  \ 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n \
  \     )\n    )\n    (layer4): Sequential(\n      (0): Bottleneck(\n        (conv1):\
  \ Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1):\
  \ BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1,\
  \ 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True,\
  \ track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1,\
  \ 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n \
  \       (downsample): Sequential(\n          (0): Conv2d(1024, 2048, kernel_size=(1,\
  \ 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n\
  \        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n\
  \        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1,\
  \ 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True,\
  \ track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1,\
  \ 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n \
  \     )\n      (2): Bottleneck(\n        (conv1): Conv2d(2048, 512, kernel_size=(1,\
  \ 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1,\
  \ affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3,\
  \ 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512,\
  \ eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3):\
  \ Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3):\
  \ BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
  \        (relu): ReLU(inplace=True)\n      )\n    )\n    (avgpool): AdaptiveAvgPool2d(output_size=(1,\
  \ 1))\n    (fc): Linear(in_features=2048, out_features=21, bias=True)\n  )\n)"
optimizer: "Adam (\nParameter Group 0\n    amsgrad: False\n    betas: (0.9, 0.999)\n\
  \    eps: 1e-08\n    lr: 0.001\n    maximize: False\n    weight_decay: 0\n)"
output_dir: .
scheduler: <torch.optim.lr_scheduler.ReduceLROnPlateau object at 0x7fdc5255aaf0>
size: &id001 !!python/tuple
- 400
- 400
testing_indices:
- !!python/tuple
  - c0b2d8e1d3d39afe
  - 2
training_indices:
- !!python/tuple
  - c0b2d8e1d3d39afe
  - 0
transform: !!python/object:torchvision.transforms.transforms.Compose
  transforms:
  - !!python/object:pytorch_utils.pytorch_utils.EdgeResize
    resize: !!python/object:torchvision.transforms.transforms.Compose
      transforms:
      - !!python/object:torchvision.transforms.transforms.Resize
        _backward_hooks: !!python/object/apply:collections.OrderedDict
        - []
        _buffers: !!python/object/apply:collections.OrderedDict
        - []
        _forward_hooks: !!python/object/apply:collections.OrderedDict
        - []
        _forward_pre_hooks: !!python/object/apply:collections.OrderedDict
        - []
        _is_full_backward_hook: null
        _load_state_dict_pre_hooks: !!python/object/apply:collections.OrderedDict
        - []
        _modules: !!python/object/apply:collections.OrderedDict
        - []
        _non_persistent_buffers_set: !!set {}
        _parameters: !!python/object/apply:collections.OrderedDict
        - []
        _state_dict_hooks: !!python/object/apply:collections.OrderedDict
        - []
        antialias: null
        interpolation: !!python/object/apply:torchvision.transforms.functional.InterpolationMode
        - bilinear
        max_size: null
        size: *id001
        training: true
    size: *id001
  - !!python/object:torchvision.transforms.transforms.ToTensor {}
validation_indices:
- !!python/tuple
  - c0b2d8e1d3d39afe
  - 1
